ODM
object data mapper
データベースから送られてくるデータを
Javascriptのオブジェクトにマッピング(変換)する
データ検証や複雑なクエリを
Javascriptで作成できる

→mongoDBをより強力に使用するツール

★モデル
mongoDBとのやり取りをスムーズ且便利に行うためのもの
１コレクション(DB側)：１モデル
モデル作成前に。。
★Schemaを作成する
↑あるデータの形を定義するもの
const 変数名 = new mongoose.Schema({オブジェクト})
※mongooseの世界に存在する概念

モデル作成(クラス)
const 変数名(大文字) = mongoose.model('Movie', movieSchema);
大文字から始める。単数形
mongooseはデータを小文字の複数形(movies)で扱うことになる
※これによりnewでインスタンス作成、mongoDBにインスタンスの情報を保存できる
インスタンス変数.save()
↑DBに保存(insert)できる

保存(insert)
モデル名.insertMany([{オブジェクト}]);

検索
非同期処理になる
モデル名.find({year: { $lt: 1990}})
.then(data => console.log(data))
thenでつなげることができる
パスで指定されたidから検索する↓
findById('自動生成されたIDをそのまま渡す')
.then(//処理)

更新
モデル名.updateOne({year: 1990}, {title: 変えたいもの})
第一引数：指定するためのオブジェクト
第二引数：変更したいオブジェクト
※処理の結果しか返ってこない

モデル名.findOneAndUpdate({year: 1990}, {title: 変えたいもの}, {new: boolean})
第三引数：false→更新前のオブジェクトが返ってくる
        true→更新後のオブジェクトが返ってくる

削除
モデル名.updateOne({year: 1990})
第一引数：指定するためのオブジェクト
※処理の結果しか返ってこない

モデル名.findOneAndDelete({year: 1990})
※削除したオブジェクトが返ってくる

バリデーション
①スキーマでは「required:true」で必須入力にすることができる
①type属性は指定した型になりえるものを使用可能
③インスタンス時にスキーマにない情報を追加しても保存されない
④「default:値」のオプションで指定しなかった場合の挙動を指定
⑤ enum[]で配列内に記載のないものを挿入できなくなる
ex) size: {
        type: String,
        enum: ['S', 'M', 'L', 'LL']
    }
⑥スキーマのオブジェクトとして配列を渡すことができる
ex) categories : [String]
⑦データのネストもできる
ex) qty: {
        instore: {
            type: Number,
            default: 100
        },
        onLine: {
            type: Number,
            default: 0
        }
}

★更新時のバリデーション
デフォルトではスキーマ設定時のバリデーションが機能しない
→ 第3引数に「runValidators: true」を設定する必要がある

バリデーションエラー時のメッセージ
↑ 配列にしてメッセージを指定
ex) price: {
        type: Number,
        min: [0, 'priceは0より大きい値にしてください']
    }

インスタンスメソッド
定義方法：スキーマ名.methods.メソッド名 = function() ={
    //処理 ※thisは呼び出したインスタンス
}
スタティックメソッド
定義方法：スキーマ名.statics.メソッド名 = function() ={
    //処理 ※thisは呼び出したモデル
}

バーチャルメソッド
存在しないプロパティを設定できる
ex) personSchema.virtual('fullName').get(function(){
    return `${this.first} ${this.last}`;
})

ミドルウェア
特定の処理の間に自分の処理を挟み込める