ミドルウェア
リクエスト/レスポンスのライフサイクルの中で実行される関数
ただの関数
リクエストオブジェクト・レスポンスオブジェクトにアクセスできる
res.send()などのメソッドでレスポンスを返すことで
HTTPリクエストを終了させることができる
★next()を呼び出すことで次々と連鎖させることができる

app.use('/', (req, res, next){
    next();
})
次の関数に処理を渡すことができる
内容はリクエストの内容・定義内容によって異なる
★実務でのコツ
return next();
↑　returnの後は処理されないのでミドルウェアが終了する

自分で作った404に送る
一通りのルーティングを定義した後に
一番下にpathを指定せず、app.use を定義する
ex)
app.use((req, res) => {
    res.status(404).send('ページが見つかりません');
})

特定のルーティングにミドルウェアを設定する方法
①ミドルウェアを変数化←分かりやすく
②コールバック関数として複数渡す
ex)
app.get('/secret', verifyPassword, (req, res) => {
    res.send('ここは秘密のページ')
})